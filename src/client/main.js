/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("///Dependencies Webpack  and threeJS, npm install webpack webpack-cli, npm install threeJS\r\n// npm run-script build to compile, work on this file.\r\n// dont change package.json\r\n /**************************\r\n\r\n//Llamada de la librerias\r\nconst THREE = require('three');\r\n// CommonJS:\r\nconst dat = require('dat.gui');\r\nconst Stats = require('stats.js');\r\n\r\n\r\n\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n//Model loaders\r\n\r\n\r\n\r\n// CameraControls.install( { THREE: THREE } );\r\nconst canvas = document.getElementById('canvas');\r\nconst clock = new THREE.Clock();\r\n // Optional: Pre-fetch Draco WASM/JS module.\r\n// dracoLoader.preload();\r\n//Scene and render\r\nvar renderer, scene, bgScene, camera, cameraControls;\r\nvar bgMesh;\r\nvar engine;\r\nvar controls;\r\nvar mixer, mixer2,mixerCap;\r\n//Lights\r\nvar spotLight, light, hemisLight;\r\nvar spotLightHelper;\r\n//Skybox\r\nvar materiall;\r\nvar Skybox;\r\nvar video;\r\nvar guiALLF4;\r\nvar guiALLF24;\r\n\r\n//Interface\r\nvar gui;\r\nvar obj;\r\nvar stats;\r\n\r\nfunction init() \r\n{\r\n\t\r\n\t//DAT GUI\r\n\tgui = new dat.gui.GUI();\r\n\tobj = {\r\n\t\texplode: function () {\r\n\t\talert('Bang!');\r\n\t\t},\r\n\t\r\n\t\t//spotlight\r\n\t\tposX: -25, \r\n\t\tposY: 8, \r\n\t\tposZ: 7,\r\n\t\tcolorL: \"#ffffff\", // RGB array\r\n\t\tpenunmbra: 0.2,\r\n\t\thelpSpot:true,\r\n\t\tintSpot:1,\r\n\t\t\r\n\t\tintAmbien:1,\r\n\t\tcolor0: \"#443333\", \r\n\t\tintHemis:1,\r\n\t\tcolorg: \"#111122\", \r\n\t};\r\n\t\r\n\trenderer = new THREE.WebGLRenderer({ canvas });\r\n\tscene = new THREE.Scene();\r\n    // scene.fog = new THREE.Fog( 0x443333, 1, 4 );\r\n \r\n       var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;\r\n\tvar VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 2, FAR = 5000;\r\n\tcamera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n     \r\n\t\t\r\n\t\r\n\t\r\n\t//Lights\r\n\t// spotLight = new THREE.SpotLight( 0xffff00 );\r\n\tlight = new THREE.AmbientLight( obj.color0 ); // soft white light\r\n\themisLight = new THREE.HemisphereLight( obj.color0, obj.colorg, 1 );\r\n\t\r\n\r\n\tstats = new Stats();\r\n}\r\n\r\n\r\nfunction addLights() \r\n{\r\n\t\r\n\t//Hemisphere light\r\n\tscene.add( hemisLight );\r\n\tspotLight = new THREE.SpotLight();\r\n    spotLight.angle = Math.PI / 16;\r\n    spotLight.penumbra = 0.5;\r\n    spotLight.castShadow = true;\r\n    spotLight.position.set( obj.posX, obj.posY, obj.posZ );\r\n\tscene.add( spotLight );\r\n\tspotLightHelper = new THREE.SpotLightHelper( spotLight );\r\n\t//scene.add( spotLightHelper );\r\n\t//fireworklight\r\n\tvar light = new THREE.PointLight(0xffffff);\r\n\tlight.position.set(0,250,0);\r\n\tscene.add(light);\r\n}\r\n\r\n\r\nfunction main() {\r\n\r\n\t\r\n\t//Renderer\r\n\trenderer.setClearColor(0x222222);\r\n\trenderer.autoClearColor = false;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\trenderer.outputEncoding = THREE.sRGBEncoding;\r\n\t\r\n    renderer.gammaFactor = 2.2;\r\n\r\n\t\r\n\t//Camera\r\n\tcamera.position.x = 14;\r\n\tcamera.position.y = 2;\r\n\tcamera.position.z = 6;\r\n\tcamera.lookAt( 0, 0.1, 0 );\r\n    controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n\taddLights();\r\n\r\n\t \r\n\t\r\n\t\r\n\r\n        var floorTexture = new THREE.TextureLoader().load( '../client/js/images/checkerboard.jpg' )\r\n\tfloorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; \r\n\tfloorTexture.repeat.set( 10, 10 );\r\n\t\r\n\tvar plane = new THREE.Mesh(\r\n        new THREE.PlaneBufferGeometry( 30, 30 ),\r\n\t\tnew THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010, map: floorTexture, side: THREE.DoubleSide} )\r\n\t\t);\r\n    plane.rotation.x = - Math.PI / 2;\r\n    plane.receiveShadow = true;\r\n\tscene.add( plane );\r\n\r\n\t\r\n\taddGUIChooseSkybox();\r\n\taddGUIChooseSkyboxTime ();\r\n\r\n\t\r\n\taddSkybox(0,false);//Create animated sky\r\n\r\n\t//SkyTimeWarp(0);\r\n\t//addGUI();\r\n\t\r\n\taddGUISkyboxproperties();\r\n\t\r\n     \r\n\t\r\n\t\r\n}\r\n \r\n        function addGUISkyboxproperties(){//Create animated sky\r\n\t\r\n\t\t\tstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n\t\t\tdocument.body.appendChild( stats.dom );\r\n\t\r\n\tvar guiSLSky = gui.addFolder('Skybox Properties');\r\n\tguiSLSky.add(materiall, 'roughness').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\tmateriall.roughness = val;\r\n\t\t//materiall.update();\r\n\t});\r\n\tguiSLSky.add(materiall, 'metalness').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\tmateriall.metalness = val;\r\n\t\t//materiall.update();\r\n\r\n\t});\r\n\t\r\n\r\n}\r\nfunction addGUIChooseSkybox (){\r\n\tvar parameters = \r\n   {\r\n\t\tfour_minutes:   function() { addSkybox( 0, true ); },\r\n\t\ttwentyfour_minutes:   function() { addSkybox(  1, true ); },\r\n\t\r\n   };\r\n  var guiALL= gui.addFolder('Choose Video');\r\n   guiALL.add( parameters, 'four_minutes'   ).name(\"Short Video (4)\");\r\n   guiALL.add( parameters, 'twentyfour_minutes'   ).name(\"Long Video (24)\");\r\n}\r\n\r\nfunction addSkybox(num,\tisnotfirsttime){//Create animated sky\r\n\r\n\tif (num== 0){// 4 minutes video\r\n\t\tvideo= document.createElement('video');\r\n\t\tvideo.load();\r\n\t\tvideo.autoplay= true; \r\n\t\tvideo.needsUpdate= true;\r\n\t\tvideo.loop\t= true;\r\n\t\tvideo.src\t= \"../client/js/images/Amanecer.mp4\";\r\n\t\tvideo.volume\t= 0;\r\n\t\tvideo.playbackRate=0.066;//4 minutos /60minutos = 0.066\r\n\t\t\r\n\t\tvideo.play();\r\n\t\tvideo.currentTime=0 ;\r\n\t\t\r\n\t\t\r\n\t\tguiALLF4.show();\t\t\t\r\n\t\tguiALLF24.hide();\r\n\t\tguiALLF24.close();\r\n\t\t\r\n\t\r\n\t} \r\n\tif (num== 1){ // 24 minutes video\r\n\t\tvideo= document.createElement('video');\r\n\t\tvideo.load();\r\n\t\tvideo.autoplay= true; \r\n\t\tvideo.needsUpdate= true;\r\n\t\tvideo.loop\t= true;\r\n\t\tvideo.src\t= \"../client/js/images/Sky.mp4\";\r\n\t\tvideo.volume\t= 0;\r\n\t\tvideo.playbackRate= 0.4;//24 minutos /60minutos = 0.4\r\n\t\t\r\n\t\tvideo.play();\r\n\t\t\r\n\t\t\tguiALLF4.hide();\r\n\t\t\tguiALLF24.show();\r\n\t\t\tguiALLF4.close();\r\n\t} \r\n\t\r\n\r\n\tvar texture;\r\n\t\r\n\t\r\n\ttexture = new THREE.VideoTexture( video );\r\n\t\r\n\t\r\n\r\n    var skyGeo;\r\n    //add sphere\r\n\tskyGeo=\tnew THREE.SphereGeometry( 300, 30, 30 );\r\n\t\r\n\t//adding the video to the sphere\r\n \t//var material = new THREE.MeshBasicMaterial({ map: texture,});\r\n     materiall = new THREE.MeshStandardMaterial( {\r\n\r\n    //color: 0xffffff,\r\n\r\n    roughness: 1,\r\n    metalness: 1,\r\n    map: texture,\r\n\r\n\t} );\r\n\tif (isnotfirsttime){\r\n\t\t\r\n\t \r\n\t\tscene.remove( Skybox );\r\n\t}\r\n\t\r\n\t Skybox = new THREE.Mesh(skyGeo, materiall);\r\n\t// put the video both sides of the sphere\r\n\tSkybox.material.side = THREE.DoubleSide;\r\n\t//Skybox.Side = THREE.DoubleSide;\r\n\t//add sky\r\n\tscene.add(Skybox);\r\n}\r\nfunction SkyTimeWarp(TimeWarp,VideoTime){//Create animated sky\r\n\r\n\t//choose the video\r\n\tif (VideoTime== 0){\r\n\t\r\n\t\tSkyTimeWarp_4min(TimeWarp);\r\n\t\t \r\n\t} \r\n\tif (VideoTime== 1){\r\n\t\tSkyTimeWarp_24min(TimeWarp) ;\r\n\t} \t\r\n}\r\nfunction SkyTimeWarp_4min(num){//Create animated sky\r\n\r\n\t//choose the video\r\n\tif (num== 0){\r\n\t\r\n\t\tvideo.currentTime=0 ;\r\n\t\t \r\n\t} \r\n\tif (num== 1){\r\n\t\tvideo.currentTime=60 ;\r\n\t} \r\n\tif (num==2){\r\n\t\r\n\t\tvideo.currentTime=120 ;\r\n\t} \r\n\tif (num==3){\r\n\t\r\n\t\tvideo.currentTime=180 ;\r\n\t} \r\n\t\r\n\t\r\n}\r\nfunction SkyTimeWarp_24min(num){//Create animated sky\r\n\r\n\t//choose the video\r\n\tif (num== 0){\r\n\t\r\n\t\tvideo.currentTime=0 ;\r\n\t\t \r\n\t} \r\n\tif (num== 1){\r\n\t\tvideo.currentTime=360 ;\r\n\t} \r\n\tif (num==2){\r\n\t\r\n\t\tvideo.currentTime=720 ;\r\n\t} \r\n\tif (num==3){\r\n\t\r\n\t\tvideo.currentTime=1080 ;\r\n\t} \r\n\t\r\n\t\r\n}\r\n     \r\n\r\n\r\n \r\n        \r\n\r\nfunction addGUIChooseSkyboxTime (){\r\n\t\r\n\tvar parameters4 = \r\n   {\r\n\t\tsunrise:   function() { SkyTimeWarp( 0, 0 ); },\r\n\t\tday:   function() { SkyTimeWarp(  1, 0 ); },\r\n\t\tsunset:   function() { SkyTimeWarp( 2, 0  ); },\t\t\t\r\n\t\tnigth:   function() { SkyTimeWarp( 3, 0 ); }\r\n   };\r\n   var parameters24 = \r\n   {\r\n\t\tsunrise:   function() { SkyTimeWarp( 0, 1 ); },\r\n\t\tday:   function() { SkyTimeWarp(  1, 1 ); },\r\n\t\tsunset:   function() { SkyTimeWarp( 2, 1  ); },\t\t\t\r\n\t\tnigth:   function() { SkyTimeWarp( 3, 1 ); }\r\n   };\r\n   guiALLF4= gui.addFolder('Time Warp 4');\r\n   guiALLF4.add( parameters4, 'sunrise'   ).name(\"Sunrise\");\r\n   guiALLF4.add( parameters4, 'day'   ).name(\"Day\");\r\n   guiALLF4.add( parameters4, 'sunset'   ).name(\"Sunset\"); \r\n   guiALLF4.add( parameters4, 'nigth'   ).name(\"Nigth\");\r\n  \r\n   guiALLF24= gui.addFolder('Time Warp 24');\r\n   guiALLF24.add( parameters24, 'sunrise'   ).name(\"Sunrise\");\r\n   guiALLF24.add( parameters24, 'day'   ).name(\"Day\");\r\n   guiALLF24.add( parameters24, 'sunset'   ).name(\"Sunset\"); \r\n   guiALLF24.add( parameters24, 'nigth'   ).name(\"Nigth\");\r\n   \r\n}\r\n\r\nfunction displayWindowSize(){\r\n\t// Get width and height of the window excluding scrollbars\r\n\tvar w = document.documentElement.clientWidth;\r\n\tvar h = document.documentElement.clientHeight;\r\n\t\r\n\t// Display result inside a div element\r\n\t// console.log(\"Width: \" + w + \", \" + \"Height: \" + h);\r\n\trenderer.setSize(w, h);\r\n\t// camera.fov = Math.atan(window.innerHeight / 2 / camera.position.z) * 2 * THREE.Math.RAD2DEG;\r\n\tcamera.aspect = w / h;\r\n\tcamera.updateProjectionMatrix();\r\n}\r\n\r\n// Attaching the event listener function to window's resize event\r\nwindow.addEventListener(\"resize\", displayWindowSize);\r\n// document.addEventListener( 'keydown', onKeyDown, false );\r\n// document.addEventListener( 'keyup', onKeyUp, false );\r\n\r\nfunction animate() \r\n{\r\n\r\n  requestAnimationFrame(animate);\r\n  render();\r\n  renderer.render(scene, camera);\r\n  controls.update();\r\n  stats.update();\r\n  var dt = clock.getDelta();\r\n  \t\r\n  //controls.update();\r\n}\r\n\r\n\r\nfunction render() \r\n{\r\n\tconst delta = clock.getDelta();\r\n\t//Para la animacion\r\n\tif ( mixer ) mixer.update( delta );\r\n\tif ( mixer2 ) mixer2.update( delta );\r\n\tif ( mixerCap ) mixerCap.update( delta );\r\n\t\r\n\t\r\n}\r\n\r\ninit();\r\nmain();\r\nanimate();\r\n***FINISH DOMEVIDEOPLAYER**************/\r\n/**START DOWNLOADER*************\r\n//Dependencies Webpack  and threeJS, npm install webpack webpack-cli, npm install threeJS\r\n// npm run-script build to compile, work on this file.\r\n// dont change package.json\r\n \r\n\r\n//Llamada de la librerias\r\nconst THREE = require('three');\r\n// CommonJS:\r\nconst dat = require('dat.gui');\r\nconst Stats = require('stats.js');\r\n \r\n\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n//Model loaders\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js';\r\n//Basis Texture loader\r\n\r\n\r\n\r\n\r\n// CameraControls.install( { THREE: THREE } );\r\nconst canvas = document.getElementById('canvas');\r\nconst clock = new THREE.Clock();\r\n // Optional: Pre-fetch Draco WASM/JS module.\r\n// dracoLoader.preload();\r\n//Scene and render\r\nvar renderer, scene, bgScene, camera, cameraControls;\r\nvar bgMesh;\r\nvar engine;\r\nvar controls;\r\nvar mixer, mixer2,mixerCap;\r\n//Lights\r\nvar spotLight, light, hemisLight;\r\nvar spotLightHelper;\r\n//Skybox\r\nvar materiall;\r\nvar Skybox;\r\nvar video=[];\r\n//Interface\r\nvar gui;\r\nvar obj;\r\nvar stats;\r\nvar childd=[];\r\nvar childdd;\r\n//DownLoader\r\nvar INTERSECTED = null;\r\nvar raycaster = new THREE.Raycaster();\r\nvar mouse = new THREE.Vector2( Infinity, Infinity );\r\nvar group = new THREE.Object3D();\r\nvar Gltf_number=0;\r\nvar indexmodel=0;\r\nvar action;\r\nfunction init() \r\n{\r\n\t\r\n\t//DAT GUI\r\n\tgui = new dat.gui.GUI();\r\n\tobj = {\r\n\t\texplode: function () {\r\n\t\talert('Bang!');\r\n\t\t},\r\n\t\r\n\t\t//spotlight\r\n\t\tposX: -25, \r\n\t\tposY: 8, \r\n\t\tposZ: 7,\r\n\t\tcolorL: \"#ffffff\", // RGB array\r\n\t\tpenunmbra: 0.2,\r\n\t\thelpSpot:true,\r\n\t\tintSpot:1,\r\n\t\t\r\n\t\tintAmbien:1,\r\n\t\tcolor0: \"#443333\", \r\n\t\tintHemis:1,\r\n\t\tcolorg: \"#111122\", \r\n\t};\r\n\t\r\n\trenderer = new THREE.WebGLRenderer({ canvas });\r\n\tscene = new THREE.Scene();\r\n    // scene.fog = new THREE.Fog( 0x443333, 1, 4 );\r\n       var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;\r\n\tvar VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 2, FAR = 5000;\r\n\tcamera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n     \r\n\t\t\r\n\t\r\n\t\r\n\t//Lights\r\n\t// spotLight = new THREE.SpotLight( 0xffff00 );\r\n\tlight = new THREE.AmbientLight( obj.color0 ); // soft white light\r\n\themisLight = new THREE.HemisphereLight( obj.color0, obj.colorg, 1 );\r\n\t\r\n\r\n\tstats = new Stats();\r\n}\r\n\r\nfunction addLights() \r\n{\r\n\t\r\n\t//Hemisphere light\r\n\tscene.add( hemisLight );\r\n\tspotLight = new THREE.SpotLight();\r\n    spotLight.angle = Math.PI / 16;\r\n    spotLight.penumbra = 0.5;\r\n    spotLight.castShadow = true;\r\n    spotLight.position.set( obj.posX, obj.posY, obj.posZ );\r\n\tscene.add( spotLight );\r\n\tspotLightHelper = new THREE.SpotLightHelper( spotLight );\r\n\tscene.add( spotLightHelper );\r\n\t//fireworklight\r\n\tvar light = new THREE.PointLight(0xffffff);\r\n\tlight.position.set(0,250,0);\r\n\tscene.add(light);\r\n}\r\n\r\n\r\nfunction main() {\r\n\r\n\t\r\n\t//Renderer\r\n\trenderer.setClearColor(0x222222);\r\n\trenderer.autoClearColor = false;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\trenderer.outputEncoding = THREE.sRGBEncoding;\r\n\t//renderer.gammaOutput = true;\r\n    renderer.gammaFactor = 2.2;\r\n   // renderer.shadowMap.enabled = true;\r\n//\trenderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\r\ndocument.body.appendChild( renderer.domElement );\r\n\t//Camera\r\n\tcamera.position.x = 14;\r\n\tcamera.position.y = 2;\r\n\tcamera.position.z = 6;\r\n\tcamera.lookAt( 0, 0.1, 0 );\r\n    controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n\taddLights();\r\n\r\n\r\n\r\n\r\n\tloadFBX('model/fbx/avatar1.fbx', [2, 0, 10], [0.01, 0.01, 0.01]).then(function(obj1){\r\n\t\tconsole.log('termine!');\r\n\t\tmixer = new THREE.AnimationMixer( obj1 );\r\n\tvar action = mixer.clipAction( obj1.animations[ 0 ] );\r\n\t\taction.play();\r\n\r\n\t})\r\n\t\r\n\tloadModels();\r\n\t\r\n\t \r\n\t //action.play();\r\n\t boxes();\r\n        var floorTexture = new THREE.TextureLoader().load( '../client/js/images/checkerboard.jpg' );\r\n\tfloorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; \r\n\tfloorTexture.repeat.set( 10, 10 );\r\n\t\r\n\tvar plane = new THREE.Mesh(\r\n        new THREE.PlaneBufferGeometry( 30, 30 ),\r\n\t\tnew THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010, map: floorTexture, side: THREE.DoubleSide} )\r\n\t\t);\r\n    plane.rotation.x = - Math.PI / 2;\r\n   \r\n\r\n\t\tscene.add( plane );\r\n\t\r\n\t\r\n\t //renderer.domElement.addEventListener( 'click', onMouseClick );\r\n}\r\n\r\nfunction loadFBX(path,pos,scale) {\r\n\tconst promise = new Promise(function (resolve, reject) {\r\n\t\tvar loader = new FBXLoader();\r\n\t\tloader.load( path, function ( object ) {\r\n\t\r\n\t\t\tconsole.log(object);\r\n\t\t\tobject.scale.set(scale[0], scale[1], scale[2]);\r\n\t\t\tobject.position.set(pos[0], pos[1], pos[2]);\r\n\t\t\t\t\r\n\t\t\tobject.traverse( function ( child ) {\r\n\t\t\t\tif ( child.isMesh ) {\r\n\t\t\t\t\tchild.castShadow = true;\r\n\t\t\t\t\tchild.receiveShadow = true;\r\n\t\t\t\t}\r\n\t\t\t\t//childd[Gltf_number]=child;// Downloader\r\n\t\t\t} );\r\n\t\t\tscene.add( object );\r\n\t\t\t//childd[Gltf_number]=object;// Downloader\r\n\t\t\tconsole.log(object);\r\n\t\t\tif (object == null) {\r\n\t\t\t\treject();\r\n\t\t\t}else{\r\n\t\t\t\tresolve(object);\r\n\t\t\t}\r\n\t\r\n\t\t} );\r\n\t\t\r\n\t})\r\n\t\r\n\r\n\treturn promise;\r\n}\r\n\r\n\r\n     \r\n\r\n\r\n\r\nfunction displayWindowSize(){\r\n\t// Get width and height of the window excluding scrollbars\r\n\tvar w = document.documentElement.clientWidth;\r\n\tvar h = document.documentElement.clientHeight;\r\n\t\r\n\t// Display result inside a div element\r\n\t// console.log(\"Width: \" + w + \", \" + \"Height: \" + h);\r\n\trenderer.setSize(w, h);\r\n\t// camera.fov = Math.atan(window.innerHeight / 2 / camera.position.z) * 2 * THREE.Math.RAD2DEG;\r\n\tcamera.aspect = w / h;\r\n\tcamera.updateProjectionMatrix();\r\n\t\r\n\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\tcamera.updateProjectionMatrix();\r\n\trenderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n}\r\n\r\n// Attaching the event listener function to window's resize event\r\nwindow.addEventListener(\"resize\", displayWindowSize);\r\n\r\n\r\nfunction animate() \r\n{\r\n\t\r\n\r\n  requestAnimationFrame(animate);\r\n  \r\n  raycast();\r\n  render();\r\n  renderer.render(scene, camera);\r\n  controls.update();\r\n  stats.update();\r\n  var dt = clock.getDelta();\r\n  \r\n}\r\n\r\n\r\nfunction render() \r\n{\r\n\tconst delta = clock.getDelta();\r\n\t//Para la animacion\r\n\tif ( mixer ) mixer.update( delta );\r\n\tif ( mixer2 ) mixer2.update( delta );\r\n\tif ( mixerCap ) mixerCap.update( delta );\r\n\t\r\n\t\r\n}\r\n//------------------------------------------------------------download\r\nfunction raycast() {\r\n      \r\n\traycaster.setFromCamera( mouse, camera );\r\n\t\r\n  var intersects = raycaster.intersectObjects(group.children );\r\n  \r\n\t\t  if ( intersects.length > 0 ) {\r\n  \r\n\t\t\t  if ( INTERSECTED != intersects[ 0 ].object ) {\r\n\t\r\n\t\t\t\t \r\n\t  \r\n\t\t\t\t  INTERSECTED = intersects[ 0 ].object;\r\n\t\t\t\t \r\n\t\t\t  }\r\n\t\r\n\t\t  } else {\r\n  \r\n\t\t\t \r\n\t\r\n\t\t\t  INTERSECTED = null;\r\n\t\r\n\t\t  }\r\n\t\t  \r\n\t\r\n\r\n}\r\nfunction onMouseMove( event ) {\r\n      \r\n\tevent.preventDefault();\r\n  \r\n\t\t  mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n\t\t  mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n}\r\n\r\nfunction onMouseClick( event ) {\r\n\r\n\tif ( INTERSECTED !== null ) INTERSECTED.link.click(); \r\n}\r\n\r\n\t  \r\nfunction loadModels() {\r\n\r\n\tconst loader = new GLTFLoader();\r\n\tvar dracoLoader = new DRACOLoader();\r\n\t\t// dracoLoader.setDecoderPath( '/examples/js/libs/draco/' );\r\n\t\tdracoLoader.setDecoderPath('https://www.gstatic.com/draco/v1/decoders/');\r\n\t\tloader.setDRACOLoader( dracoLoader );\r\n\t\t\r\n\tconst onLoad = (gltf, position,scale,path,name) => {\r\n\t\t\r\n\t  const model = gltf.scene.children[0];\r\n\t  model.scale.set(scale[0], scale[1], scale[2]);\r\n\t  model.position.copy(position);\r\n\t \r\n\t\r\n\t  model.castShadow = true;\r\n\t  model.receiveShadow = true;\r\n\t  \r\n\t  model.traverse( function ( child ) {\r\n\t\t  if ( child.isMesh ) {\r\n\t\t\t  child.castShadow = true;\r\n\t\t\t  child.receiveShadow = true;\r\n\t\t\t  \r\n\t\t  \r\n\r\n\t\t  }\r\n\t\t  \r\n\t  } );\r\n\r\n\t  scene.add(model);\r\n\t  model.animations; // Array<THREE.AnimationClip>\r\n\t  model.scene; // THREE.Group\r\n\t  model.scenes; // Array<THREE.Group>\r\n\t  model.cameras; // Array<THREE.Camera>\r\n\t  model.asset; // Object\r\n\t \r\n\t \r\n\t\t\t\r\n\t  var link = document.createElement('a');\r\n\t  link.download = name;\r\n\t  link.href = path;\r\n\t  \r\n  \r\n\t  function clicked( event ) {\r\n\t  \r\n\t\t  mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n\t\t\t  mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n\t\t\t  \r\n\t\traycaster.setFromCamera( mouse, camera );\r\n\t  \r\n\t\t  var intersects = raycaster.intersectObject(model, true);\r\n\t  \r\n\t\tconsole.log(intersects.length)\r\n  \r\n\t\tif (intersects.length > 0) {\r\n\t\t\t\r\n\t\t\tvar position = {\r\n\t\t\t\tx: controls.target.x,\r\n\t\t\t\ty: controls.target.y,\r\n\t\t\t\tz: controls.target.z\r\n\t\t\t  };\r\n\t\t\t\r\n\t\t\tconsole.log(\"position\", position);\r\n\t\r\n\t\t\tvar target = {\r\n\t\t\t  x: intersects[0].point.x,\r\n\t\t\t  y: intersects[0].point.y,\r\n\t\t\t  z: intersects[0].point.z\r\n\t\t\t}\r\n\t\r\n\t\t\tconsole.log(\"target\", target);\r\n\t\t\tconsole.log(\"clicked\");\r\n\t\r\n\r\n\t\t \r\n\t\t  link.click();\r\n\t\t} else {\r\n\t\t\r\n  \r\n\t\t  INTERSECTED = null;\r\n\t\t}\r\n\t  }\r\n  \r\n\t  renderer.domElement.addEventListener('click', function(event) {\r\n\t\t// find intersections\r\n  \r\n\t\tclicked(event);\r\n\t\t//camera.updateMatrixWorld();\r\n  \r\n  \r\n\t  });\r\n  \r\n\t};\r\n  \r\n  \r\n\tconst onProgress = (xhr) => {console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );};\r\n  \r\n  \r\n\tconst onError = (errorMessage) => {\r\n\t\tconsole.log( 'An error happened' );\r\n\t\treject(errorMessage);\r\n\t};\r\n  \r\n  \r\n\tconst parrotPosition = new THREE.Vector3(0, 2, 15);\r\n\tloader.load('https://threejs.org/examples/models/gltf/Parrot.glb', gltf => onLoad(gltf, parrotPosition,[0.01, 0.01, 0.01] , \"images/Lluvia.mp4\",\"Lluvia.mp4\"), onProgress, onError);\r\n  \r\n\tconst flamingoPosition = new THREE.Vector3(0, 2, 10);\r\n\tloader.load('https://threejs.org/examples/models/gltf/Flamingo.glb', gltf => onLoad(gltf, flamingoPosition,[0.01, 0.01, 0.01] ,\"images/Sky.mp4\",\"Sky.mp4\"), onProgress, onError);\r\n  \r\n\tconst storkPosition = new THREE.Vector3(0, 2, 5);\r\n\tloader.load('https://threejs.org/examples/models/gltf/Stork.glb', gltf => onLoad(gltf, storkPosition,[0.01, 0.01, 0.01]  ,\"images/crate.gif\", \"crate.gif\"), onProgress, onError);\r\n  \r\n\tconst AssetPackPosition = new THREE.Vector3(-10, 0, -10);\r\n\tloader.load('https://assets-test-o-zone.s3.amazonaws.com/assets2021/Scenes/LilaStudios/AssetPack.gltf', gltf => onLoad(gltf, AssetPackPosition,[0.1, 0.1, 0.1] , \"images/moondust-xneg.png\",\"moondust-xneg.png\"), onProgress, onError);\r\n\t\t\r\n\t\r\n\tconst ShiseidoPosition = new THREE.Vector3(10, 0, -10);\r\n\tloader.load('https://assets-test-o-zone.s3.amazonaws.com/assets2021/Scenes/Shiseido/Shiseido_Preview/Shiseido.glb', gltf => onLoad(gltf, ShiseidoPosition,[2, 2, 2] , \"images/moondust-xneg.png\",\"moondust-xneg.png\"), onProgress, onError);\r\n\t\t\r\n  \r\n  \r\n\tconst GLTFMAPPosition = new THREE.Vector3(10,  0.001, 10);\r\n\tloader.load('../client/model/gltf/GLTFMATCAP/scene.gltf', gltf => onLoad(gltf, GLTFMAPPosition,[0.1, 0.1, 0.1] ,\"images/fibranet.pdf\",\"fibranet.pdf\"), onProgress, onError);\r\n  \r\n\tconst miguelangeloPosition = new THREE.Vector3(-10,  0.001, 10);\r\n\tloader.load('../client/model/gltf/miguelangelo/scene.gltf', gltf => onLoad(gltf, miguelangeloPosition,[0.1, 0.1, 0.1]  ,\"images/grass-512.jpg\", \"grass-512.jpg\"), onProgress, onError);\r\n  \r\n\t\r\n\tconst CapoeiraPosition = new THREE.Vector3(1, 0, 10);\r\n\tloader.load('../client/model/gltf/capoeira/Capoeira.gltf', gltf => onLoad(gltf, CapoeiraPosition,[0.01, 0.01, 0.01] , \"images/moondust-xneg.png\",\"moondust-xneg.png\"), onProgress, onError);\r\n\t\t\r\n\t\r\n  }\r\n  \r\n\r\n function boxes(){\r\n\t\t\r\n\tvar geometry = new THREE.BoxBufferGeometry( 5, 5 );\r\n\tvar material = new THREE.MeshLambertMaterial( { color: 0xdd3322 } );\r\n\tvar box = new THREE.Mesh( geometry, material );\r\nbox.position.set( - 10, 0, 0 );\r\nbox.link = document.createElement('a');\r\nbox.link.download = \"Amanecer.mp4\";\r\nbox.link.href = \"images/Amanecer.mp4\";\r\n\tgroup.add( box );\r\n\r\n\tmaterial = new THREE.MeshLambertMaterial( { color: 0x22dd33 } );\r\n\tbox = new THREE.Mesh( geometry, material );\r\nbox.position.set( 0, 0, 0 );\r\nbox.link = document.createElement('a');\r\nbox.link.download = \"checkerboard.jpg\";\r\nbox.link.href = \"images/checkerboard.jpg\";\r\n\r\n\tgroup.add( box );\r\n\r\nmaterial = new THREE.MeshLambertMaterial( { color: 0x3322dd } );\r\n\tbox = new THREE.Mesh( geometry, material );\r\nbox.position.set( 10, 0, 0 );\r\nbox.link = document.createElement('a');\r\nbox.link.download = \"fibranet.pdf\";\r\nbox.link.href = \"images/fibranet.pdf\";\r\n\tgroup.add( box );\r\n\r\nscene.add( group )\r\nrenderer.domElement.addEventListener( 'click', onMouseClick );\r\nrenderer.domElement.addEventListener( 'mousemove', onMouseMove );\r\n }\r\ninit();\r\nmain();\r\nanimate();\r\n*********************FIN DOWNLOADER**************************/\r\n\r\n/*********************Inicio Skybox3.0**************************\r\n\r\n//Dependencies Webpack  and threeJS, npm install webpack webpack-cli, npm install threeJS\r\n// npm run-script build to compile, work on this file.\r\n// dont change package.json\r\n \r\n\r\n//Llamada de la librerias\r\nconst THREE = require('three');\r\n// CommonJS:\r\nconst dat = require('dat.gui');\r\nconst Stats = require('stats.js');\r\n\r\n\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n//Model loaders\r\n\r\n\r\n\r\n\r\n\r\n// CameraControls.install( { THREE: THREE } );\r\nconst canvas = document.getElementById('canvas');\r\nconst clock = new THREE.Clock();\r\n // Optional: Pre-fetch Draco WASM/JS module.\r\n// dracoLoader.preload();\r\n//Scene and render\r\nvar renderer, scene, bgScene, camera, cameraControls;\r\nvar bgMesh;\r\nvar engine;\r\nvar controls;\r\nvar mixer, mixer2,mixerCap;\r\n//Lights\r\nvar spotLight, light, hemisLight;\r\nvar spotLightHelper;\r\n//Skybox\r\nvar materiall;\r\nvar Skybox;\r\nvar video=[];\r\n//Interface\r\nvar gui;\r\nvar obj;\r\nvar stats;\r\nvar childd;\r\nvar childdd;\r\nfunction init() \r\n{\r\n\t\r\n\t//DAT GUI\r\n\tgui = new dat.gui.GUI();\r\n\tobj = {\r\n\t\texplode: function () {\r\n\t\talert('Bang!');\r\n\t\t},\r\n\t\r\n\t\t//spotlight\r\n\t\tposX: -25, \r\n\t\tposY: 8, \r\n\t\tposZ: 7,\r\n\t\tcolorL: \"#ffffff\", // RGB array\r\n\t\tpenunmbra: 0.2,\r\n\t\thelpSpot:true,\r\n\t\tintSpot:1,\r\n\t\t\r\n\t\tintAmbien:1,\r\n\t\tcolor0: \"#443333\", \r\n\t\tintHemis:1,\r\n\t\tcolorg: \"#111122\", \r\n\t};\r\n\t\r\n\trenderer = new THREE.WebGLRenderer({ canvas });\r\n\tscene = new THREE.Scene();\r\n    // scene.fog = new THREE.Fog( 0x443333, 1, 4 );\r\n \r\n       var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;\r\n\tvar VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 2, FAR = 5000;\r\n\tcamera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n    \r\n\t\t\r\n\t\r\n\t\r\n\t//Lights\r\n\t// spotLight = new THREE.SpotLight( 0xffff00 );\r\n\tlight = new THREE.AmbientLight( obj.color0 ); // soft white light\r\n\themisLight = new THREE.HemisphereLight( obj.color0, obj.colorg, 1 );\r\n\t\r\n\r\n\tstats = new Stats();\r\n}\r\n\r\nfunction addLights() \r\n{\r\n\t\r\n\t//Hemisphere light\r\n\tscene.add( hemisLight );\r\n\tspotLight = new THREE.SpotLight();\r\n    spotLight.angle = Math.PI / 16;\r\n    spotLight.penumbra = 0.5;\r\n    spotLight.castShadow = true;\r\n    spotLight.position.set( obj.posX, obj.posY, obj.posZ );\r\n\tscene.add( spotLight );\r\n\tspotLightHelper = new THREE.SpotLightHelper( spotLight );\r\n\tscene.add( spotLightHelper );\r\n\t//fireworklight\r\n\tvar light = new THREE.PointLight(0xffffff);\r\n\tlight.position.set(0,250,0);\r\n\tscene.add(light);\r\n}\r\n\r\nfunction addGUI() \r\n{\r\n\tstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n\tdocument.body.appendChild( stats.dom );\r\n\tvar guiALL= gui.addFolder('Light');\r\n\tvar guiSL = guiALL.addFolder('SpotLight');\r\n\tguiSL.add(obj, 'helpSpot').onChange(function (val) {\r\n\t\tspotLightHelper.visible = val;\r\n\t});\r\n\tguiSL.add(obj, 'posX').onChange(function (val) {\r\n\t\tspotLight.position.x = val;\r\n\t\tspotLightHelper.update();\r\n\t});\r\n\tguiSL.add(obj, 'posY').onChange(function (val) {\r\n\t\tspotLight.position.y = val;\r\n\t\tspotLightHelper.update();\r\n\r\n\t});\r\n\tguiSL.add(obj, 'posZ').onChange(function (val) {\r\n\t\tspotLight.position.z = val;\r\n\t\tspotLightHelper.update();\r\n\r\n\t});\r\n\t//Ambient Light\r\n\tvar guiAL = guiALL.addFolder('AmbientLight');\r\n\tguiAL.addColor(obj, 'color0').onChange(function (val) {\r\n\t\tlight.color.set(val);\r\n\t\themisLight.color.set(val);\r\n\t});\r\n\tguiAL.add(obj, 'intAmbien').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\tlight.intensity = val;\r\n\t}).name('Intensity');\r\n\r\n\t//Hemisphere Light\r\n\tvar guiHL = guiALL.addFolder('HemisphereLight');\r\n\tguiHL.addColor(obj, 'colorg').onChange(function (val) {\r\n\t\themisLight.groundColor.set(val);\r\n\t});\r\n\tguiHL.add(obj, 'intHemis').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\themisLight.intensity = val;\r\n\t}).name('Intensity');\r\n\t\r\n\r\n\t\r\n}\r\n\r\nfunction main() {\r\n\r\n\t\r\n\t//Renderer\r\n\trenderer.setClearColor(0x222222);\r\n\trenderer.autoClearColor = false;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\trenderer.outputEncoding = THREE.sRGBEncoding;\r\n\t//renderer.gammaOutput = true;\r\n    renderer.gammaFactor = 2.2;\r\n   // renderer.shadowMap.enabled = true;\r\n//\trenderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\r\n\t\r\n\t//Camera\r\n\tcamera.position.x = 14;\r\n\tcamera.position.y = 2;\r\n\tcamera.position.z = 6;\r\n\tcamera.lookAt( 0, 0.1, 0 );\r\n    controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n\taddLights();\r\n\r\n\t\r\n\t \r\n\t //create video\r\n\t for (let index = 0; index < 3; index++) {\r\n\t\t video[index]= document.createElement('video');\r\n\t\t video[index].load();\r\n\t\t video[index].autoplay= true;\r\n\t\t video[index].needsUpdate= true;\r\n\t\t video[index].loop\t= true;\r\n\t\t\r\n\t }\r\n\t \r\n\t \r\n        var floorTexture = new THREE.TextureLoader().load( '../client/js/images/checkerboard.jpg' )\r\n\tfloorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; \r\n\tfloorTexture.repeat.set( 10, 10 );\r\n\t\r\n\tvar plane = new THREE.Mesh(\r\n        new THREE.PlaneBufferGeometry( 30, 30 ),\r\n\t\tnew THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010, map: floorTexture, side: THREE.DoubleSide} )\r\n\t\t);\r\n    plane.rotation.x = - Math.PI / 2;\r\n    plane.receiveShadow = true;\r\n\tscene.add( plane );\r\n\r\n\r\n\r\n\r\n\t\r\n\t\r\n\r\n\taddSkybox(0,false);\r\n\taddGUI();\r\n\t\r\n\taddGUISkybox();\r\n\taddGUIChooseSkybox ();\r\n     \r\n\t\r\n\t\r\n}\r\n\r\n        function addGUISkybox(){//Create animated sky\r\n\t\r\n\t\r\n\t\r\n\tvar guiSLSky = gui.addFolder('Skybox');\r\n\tguiSLSky.add(materiall, 'roughness').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\tmateriall.roughness = val;\r\n\t\t//materiall.update();\r\n\t});\r\n\tguiSLSky.add(materiall, 'metalness').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\tmateriall.metalness = val;\r\n\t\t//materiall.update();\r\n\r\n\t});\r\n\t\r\n\r\n}\r\nfunction addSkybox(num,\tisnotfirsttime){//Create animated sky\r\n\r\n\t\r\n\tvar texture;\r\n\t\r\n\t//choose the video\r\n\tif (num== 0){\r\n\t\tvideo[2].src\t= \"../client/js/images/Lluvia.mp4\";\r\n\t\tvideo[0].src\t= \"../client/js/images/Sky.mp4\";\r\n\t\tvideo[0].autoplay= true;\t\r\n\t\tvideo[2].autoplay= true;\r\n\t\t texture = new THREE.VideoTexture( video[0] );\r\n\t} \r\n\tif (num== 1){\r\n\t\tvideo[1].autoplay= true;\r\n\t\tvideo[2].autoplay= true;\r\n\t\tvideo[2].src\t= \"../client/js/images/Sky.mp4\"; \r\n\t\tvideo[1].src\t= \"../client/js/images/Lluvia.mp4\";\r\n\t\t texture = new THREE.VideoTexture( video[1] );\r\n\t} \r\n\tif (num==2){\r\n\t\tvideo[2].autoplay= true;\r\n\t\tvideo[2].src\t= \"../client/js/images/Amanecer.mp4\";\r\n\t\t texture = new THREE.VideoTexture( video[2] );\r\n\t\t \r\n\t} \r\n\t\r\n\t\r\n\t\r\n\t\r\n\r\n    var skyGeo;\r\n    //add sphere\r\n\tskyGeo=\tnew THREE.SphereGeometry( 300, 30, 30 );\r\n\t\r\n\t//adding the video to the sphere\r\n \t//var material = new THREE.MeshBasicMaterial({ map: texture,});\r\n     materiall = new THREE.MeshStandardMaterial( {\r\n\r\n    //color: 0xffffff,\r\n\r\n    roughness: 1,\r\n    metalness: 1,\r\n    map: texture,\r\n\r\n\t} );\r\n\tif (isnotfirsttime){\r\n\t\tscene.remove( Skybox );\r\n\t}\r\n\t\r\n\t Skybox = new THREE.Mesh(skyGeo, materiall);\r\n\t// put the video both sides of the sphere\r\n\tSkybox.material.side = THREE.DoubleSide;\r\n\t//Skybox.Side = THREE.DoubleSide;\r\n\t//add sky\r\n\tscene.add(Skybox);\r\n}\r\n \r\n\r\nfunction addGUIChooseSkybox (){\r\n\tvar parameters = \r\n   {\r\n\t   blueSky:   function() { addSkybox( 0 , true  ); },\r\n\t   rain:   function() { addSkybox( 1 , true  ); },\t\t\r\n\t   sunrise:   function() { addSkybox( 2 , true  ); }\t\r\n\t\r\n   };\r\n   var guiALLF= gui.addFolder('Choose Sky');\r\n   guiALLF.add( parameters, 'blueSky'   ).name(\"BlueSky\");\r\n   guiALLF.add( parameters, 'rain'   ).name(\"Rainning\");\r\n   guiALLF.add( parameters, 'sunrise'   ).name(\"Sunrise\");\r\n\r\n}\r\n     \r\n\r\nfunction displayWindowSize(){\r\n\t// Get width and height of the window excluding scrollbars\r\n\tvar w = document.documentElement.clientWidth;\r\n\tvar h = document.documentElement.clientHeight;\r\n\t\r\n\t// Display result inside a div element\r\n\t// console.log(\"Width: \" + w + \", \" + \"Height: \" + h);\r\n\trenderer.setSize(w, h);\r\n\t// camera.fov = Math.atan(window.innerHeight / 2 / camera.position.z) * 2 * THREE.Math.RAD2DEG;\r\n\tcamera.aspect = w / h;\r\n\tcamera.updateProjectionMatrix();\r\n}\r\n\r\n// Attaching the event listener function to window's resize event\r\nwindow.addEventListener(\"resize\", displayWindowSize);\r\n// document.addEventListener( 'keydown', onKeyDown, false );\r\n// document.addEventListener( 'keyup', onKeyUp, false );\r\n\r\nfunction animate() \r\n{\r\n\t\r\n\r\n  requestAnimationFrame(animate);\r\n  render();\r\n  renderer.render(scene, camera);\r\n  controls.update();\r\n  stats.update();\r\n  var dt = clock.getDelta();\r\n  engine.update( dt * 0.5);\t\r\n  //controls.update();\r\n}\r\n\r\n\r\nfunction render() \r\n{\r\n\tconst delta = clock.getDelta();\r\n\t//Para la animacion\r\n\tif ( mixer ) mixer.update( delta );\r\n\tif ( mixer2 ) mixer2.update( delta );\r\n\tif ( mixerCap ) mixerCap.update( delta );\r\n\t\r\n\t\r\n}\r\n\r\ninit();\r\nmain();\r\nanimate();\r\n*********************FIN Skybox3.0**************************/\r\n/*********************INICIO GLTF-Emissive Loader**************************\r\n\r\n//Dependencies Webpack  and threeJS, npm install webpack webpack-cli, npm install threeJS\r\n// npm run-script build to compile, work on this file.\r\n// dont change package.json\r\n \r\n\r\n//Llamada de la librerias\r\nconst THREE = require('three');\r\n// CommonJS:\r\nconst dat = require('dat.gui');\r\nconst Stats = require('stats.js');\r\n\r\n\r\n\r\n\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n//Model loaders\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n\r\n\r\n\r\n// CameraControls.install( { THREE: THREE } );\r\nconst canvas = document.getElementById('canvas');\r\nconst clock = new THREE.Clock();\r\n // Optional: Pre-fetch Draco WASM/JS module.\r\n// dracoLoader.preload();\r\n//Scene and render\r\nvar renderer, scene, bgScene, camera, cameraControls;\r\nvar bgMesh;\r\nvar engine;\r\nvar controls;\r\nvar mixer, mixer2,mixerCap;\r\n//Lights\r\nvar spotLight, light, hemisLight;\r\nvar spotLightHelper;\r\nvar materiall;\r\n//Interface\r\nvar gui;\r\nvar obj;\r\nvar stats;\r\nvar childd;\r\nvar childdd;\r\nfunction init() \r\n{\r\n\t\r\n\t//DAT GUI\r\n\tgui = new dat.gui.GUI();\r\n\tobj = {\r\n\t\texplode: function () {\r\n\t\talert('Bang!');\r\n\t\t},\r\n\t\r\n\t\t//spotlight\r\n\t\tposX: -25, \r\n\t\tposY: 8, \r\n\t\tposZ: 7,\r\n\t\tcolorL: \"#ffffff\", // RGB array\r\n\t\tpenunmbra: 0.2,\r\n\t\thelpSpot:true,\r\n\t\tintSpot:1,\r\n\t\t\r\n\t\tintAmbien:1,\r\n\t\tcolor0: \"#443333\", \r\n\t\tintHemis:1,\r\n\t\tcolorg: \"#111122\", \r\n\t};\r\n\t\r\n\trenderer = new THREE.WebGLRenderer({ canvas });\r\n\tscene = new THREE.Scene();\r\n    // scene.fog = new THREE.Fog( 0x443333, 1, 4 );\r\n \r\n       var SCREEN_WIDTH = window.innerWidth, SCREEN_HEIGHT = window.innerHeight;\r\n\tvar VIEW_ANGLE = 45, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 2, FAR = 5000;\r\n\tcamera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);\r\n     \r\n\t\t\r\n\t\r\n\t\r\n\t//Lights\r\n\t// spotLight = new THREE.SpotLight( 0xffff00 );\r\n\tlight = new THREE.AmbientLight( obj.color0 ); // soft white light\r\n\themisLight = new THREE.HemisphereLight( obj.color0, obj.colorg, 1 );\r\n\t\r\n\r\n\tstats = new Stats();\r\n}\r\n\r\nfunction addLights() \r\n{\r\n\t\r\n\t//Hemisphere light\r\n\tscene.add( hemisLight );\r\n\tspotLight = new THREE.SpotLight();\r\n    spotLight.angle = Math.PI / 16;\r\n    spotLight.penumbra = 0.5;\r\n    spotLight.castShadow = true;\r\n    spotLight.position.set( obj.posX, obj.posY, obj.posZ );\r\n\tscene.add( spotLight );\r\n\tspotLightHelper = new THREE.SpotLightHelper( spotLight );\r\n\tscene.add( spotLightHelper );\r\n\t//fireworklight\r\n\tvar light = new THREE.PointLight(0xffffff);\r\n\tlight.position.set(0,250,0);\r\n\tscene.add(light);\r\n}\r\n\r\nfunction addGUI() \r\n{\r\n\tstats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n\tdocument.body.appendChild( stats.dom );\r\n\tvar guiALL= gui.addFolder('Light');\r\n\tvar guiSL = guiALL.addFolder('SpotLight');\r\n\tguiSL.add(obj, 'helpSpot').onChange(function (val) {\r\n\t\tspotLightHelper.visible = val;\r\n\t});\r\n\tguiSL.add(obj, 'posX').onChange(function (val) {\r\n\t\tspotLight.position.x = val;\r\n\t\tspotLightHelper.update();\r\n\t});\r\n\tguiSL.add(obj, 'posY').onChange(function (val) {\r\n\t\tspotLight.position.y = val;\r\n\t\tspotLightHelper.update();\r\n\r\n\t});\r\n\tguiSL.add(obj, 'posZ').onChange(function (val) {\r\n\t\tspotLight.position.z = val;\r\n\t\tspotLightHelper.update();\r\n\r\n\t});\r\n\t//Ambient Light\r\n\tvar guiAL = guiALL.addFolder('AmbientLight');\r\n\tguiAL.addColor(obj, 'color0').onChange(function (val) {\r\n\t\tlight.color.set(val);\r\n\t\themisLight.color.set(val);\r\n\t});\r\n\tguiAL.add(obj, 'intAmbien').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\tlight.intensity = val;\r\n\t}).name('Intensity');\r\n\r\n\t//Hemisphere Light\r\n\tvar guiHL = guiALL.addFolder('HemisphereLight');\r\n\tguiHL.addColor(obj, 'colorg').onChange(function (val) {\r\n\t\themisLight.groundColor.set(val);\r\n\t});\r\n\tguiHL.add(obj, 'intHemis').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\themisLight.intensity = val;\r\n\t}).name('Intensity');\r\n\t\r\n\r\n\t\r\n}\r\n\r\nfunction main() {\r\n\r\n\t\r\n\t//Renderer\r\n\trenderer.setClearColor(0x222222);\r\n\trenderer.autoClearColor = false;\r\n    renderer.setPixelRatio( window.devicePixelRatio );\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\trenderer.outputEncoding = THREE.sRGBEncoding;\r\n\t//renderer.gammaOutput = true;\r\n    renderer.gammaFactor = 2.2;\r\n   // renderer.shadowMap.enabled = true;\r\n//\trenderer.shadowMap.type = THREE.PCFSoftShadowMap; // default THREE.PCFShadowMap\r\n\t\r\n\t//Camera\r\n\tcamera.position.x = 14;\r\n\tcamera.position.y = 2;\r\n\tcamera.position.z = 6;\r\n\tcamera.lookAt( 0, 0.1, 0 );\r\n    controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n\taddLights();\r\n\r\n\t\r\n    loadGLTFF('../client/model/gltf/GLTFMATCAP/scene.gltf', [-10,  0.001, 0], [0.5, 0.5, 0.5]).then(function(gltf){\r\n\t\tconsole.log('termine gltf!');\r\n\t\tmixerCap = new THREE.AnimationMixer( gltf.scene );\r\n\t\tvar action = mixerCap.clipAction( gltf.animations[ 0 ] );\r\n\t\taction.play();\r\n\t\t\r\n\t}).catch(function (err) {\r\n\t\tconsole.log(err);\r\n\t});/*\r\n\tloadGLTFF('../client/model/gltf/miguelangelo/scene.gltf', [10,  0.001, 0], [0.5, 0.5, 0.5]).then(function(gltf){\r\n\t\tconsole.log('termine gltf!');\r\n\t\tmixerCap = new THREE.AnimationMixer( gltf.scene );\r\n\t\tvar action = mixerCap.clipAction( gltf.animations[ 0 ] );\r\n\t\taction.play();\r\n\t\t\r\n\t}).catch(function (err) {\r\n\t\tconsole.log(err);\r\n\t});\r\n    \r\n        var floorTexture = new THREE.TextureLoader().load( '../client/js/images/checkerboard.jpg' )\r\n\tfloorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; \r\n\tfloorTexture.repeat.set( 10, 10 );\r\n\t\r\n\tvar plane = new THREE.Mesh(\r\n        new THREE.PlaneBufferGeometry( 30, 30 ),\r\n\t\tnew THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010, map: floorTexture, side: THREE.DoubleSide} )\r\n\t\t);\r\n    plane.rotation.x = - Math.PI / 2;\r\n    plane.receiveShadow = true;\r\n\tscene.add( plane );\r\n\r\n\r\n\r\n\r\n\t\r\n\t\r\n\r\n\t\r\n\taddSkybox();\r\n\taddGUI();\r\n\t\r\n\r\n\taddGUISkybox();\r\n     \r\n\t\r\n\t\r\n}\r\n \r\n        function addGUISkybox(){//Create animated sky\r\n\t\r\n\t\r\n\t\r\n\tvar guiSLSky = gui.addFolder('Skybox');\r\n\tguiSLSky.add(materiall, 'roughness').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\tmateriall.roughness = val;\r\n\t\t//materiall.update();\r\n\t});\r\n\tguiSLSky.add(materiall, 'metalness').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\tmateriall.metalness = val;\r\n\t\t//materiall.update();\r\n\r\n\t});\r\n\t\r\n\r\n}\r\nfunction addSkybox(){//Create animated sky\r\n\r\n\t//create video\r\n\tvar video= document.createElement('video');\r\n\tvideo.load();\r\n\tvideo.autoplay= true;\r\n\tvideo.needsUpdate= true;\r\n\tvideo.loop\t= true;\r\n\t//choose the video\r\n\tvideo.src\t= \"../client/js/images/Sky.mp4\";\r\n\t//video.src\t= \"../client/js/images/Lluvia.mp4\";\r\n\t//video.src\t= \"../client/js/images/Amanecer.mp4\";\r\n\t\r\n\tvar texture = new THREE.VideoTexture( video );\r\n\r\n    var skyGeo;\r\n    //add sphere\r\n\tskyGeo=\tnew THREE.SphereGeometry( 300, 30, 30 );\r\n\t\r\n\t//adding the video to the sphere\r\n \t//var material = new THREE.MeshBasicMaterial({ map: texture,});\r\n     materiall = new THREE.MeshStandardMaterial( {\r\n\r\n    //color: 0xffffff,\r\n\r\n    roughness: 1,\r\n    metalness: 1,\r\n    map: texture,\r\n\r\n    } );\r\n\tvar Skybox = new THREE.Mesh(skyGeo, materiall);\r\n\t// put the video both sides of the sphere\r\n\tSkybox.material.side = THREE.DoubleSide;\r\n\t//Skybox.Side = THREE.DoubleSide;\r\n\t//add sky\r\n\tscene.add(Skybox);\r\n}\r\n    \r\nfunction loadGLTFF(path, pos,scale) {\r\n\t\r\n\treturn new Promise((resolve, reject)=>{\r\n\r\n\t\t// Instantiate a loader\r\n\t\tvar loader = new GLTFLoader();\r\n\t\r\n\t\t// Optional: Provide a DRACOLoader instance to decode compressed mesh data\r\n\t\tvar dracoLoader = new DRACOLoader();\r\n\t\t// dracoLoader.setDecoderPath( '/examples/js/libs/draco/' );\r\n\t\tdracoLoader.setDecoderPath('https://www.gstatic.com/draco/v1/decoders/');\r\n\t\tloader.setDRACOLoader( dracoLoader );\r\n\t\r\n\t\t// Load a glTF resource\r\n\t\tloader.load(\r\n\t\t\t// resource URL\r\n\t\t\tpath,\r\n\t\t\t// called when the resource is loaded\r\n\t\t\tfunction ( gltf ) {\r\n\t\t\t\t//Transformations\r\n\t\t\t\tgltf.scene.scale.set(scale[0], scale[1], scale[2]);\r\n\t\t\t\tgltf.scene.position.set(pos[0], pos[1], pos[2]);\r\n\t\t\t\tgltf.scene.castShadow = true;\r\n\t\t\t\tgltf.scene.receiveShadow = true;\r\n\t\t\t\tgltf.scene.traverse( function ( child ) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ( child.isMesh ) {\r\n\t\t\t\t\t\tchild.castShadow = true;\r\n\t\t\t\t\t\tchild.receiveShadow = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(child instanceof THREE.Mesh){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tchild.material.emissive ;\r\n\t\t\t\t\t\tchild.material.emissiveIntensity ;console.log(child.material);\r\n\t\t\t\t\t\r\n\t\t\t\t\t}childdd=child;\r\n\t\t\t\t} );\r\n\t\t\t\tscene.add( gltf.scene );\r\n\t\t\t\tchildd=gltf.scene;\r\n\t\t\t\tconsole.log(gltf);\r\n\t\t\t\taddGUIGLTF();\r\n\t\t\t\tgltf.animations; // Array<THREE.AnimationClip>\r\n\t\t\t\tgltf.scene; // THREE.Group\r\n\t\t\t\tgltf.scenes; // Array<THREE.Group>\r\n\t\t\t\tgltf.cameras; // Array<THREE.Camera>\r\n\t\t\t\tgltf.asset; // Object\r\n\r\n\t\t\t\t\r\n\t\t\t\tresolve(gltf);\r\n\t\r\n\t\t\t},\r\n\t\t\t// called while loading is progressing\r\n\t\t\tfunction ( xhr ) {\r\n\t\r\n\t\t\t\tconsole.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\r\n\t\r\n\t\t\t},\r\n\t\t\t// called when loading has errors\r\n\t\t\tfunction ( error ) {\r\n\t\r\n\t\t\t\tconsole.log( 'An error happened' );\r\n\t\t\t\treject(error);\r\n\t\t\t});\t\r\n\t});\r\n}\r\nfunction addGUIGLTF(){//Create animated sky\r\n\t\r\n\t\r\n\t\r\n\tvar guigltf = gui.addFolder('GLTF');\r\n\tguigltf.add(childdd.material, 'emissiveIntensity').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\t\r\n\t\tchildd.traverse( function ( child ) {\r\n\t\t\t\t\t\r\n\t\t\tif ( child.isMesh ) {\r\n\t\t\t\tchild.castShadow = true;\r\n\t\t\t\tchild.receiveShadow = true;\r\n\t\t\t}\r\n\t\t\tif(child instanceof THREE.Mesh){\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tchild.material.emissiveIntensity = val;\r\n\t\t\t}\r\n\t\t});\r\n\t}).name('Intensity');\r\n\tguigltf.addColor(childdd.material, 'emissive').onChange(function (val) {\r\n\t\t\r\n\t\tchildd.traverse( function ( child ) {\r\n\t\t\t\t\t\r\n\t\t\tif ( child.isMesh ) {\r\n\t\t\t\tchild.castShadow = true;\r\n\t\t\t\tchild.receiveShadow = true;\r\n\t\t\t}\r\n\t\t\tif(child instanceof THREE.Mesh){\r\n\t\t\t\t\r\n\t\t\t\tchild.material.emissive=val;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\t}).name('Emissive');\r\n\r\n\t\r\n\tguigltf.add(childdd.material,'emissiveIntensity').min(0).max(1).step(0.1).onChange(function (val) {\r\n\t\t\r\n\t\t\r\n\t\tchildd.traverse( function ( child ) {\r\n\t\t\t\t\t\r\n\t\t\tif ( child.isMesh ) {\r\n\t\t\t\tchild.castShadow = true;\r\n\t\t\t\tchild.receiveShadow = true;\r\n\t\t\t}\r\n\t\t\tif(child instanceof THREE.Mesh){\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tchild.material.matcap = val;\r\n\t\t\t}\r\n\t\t});\r\n\t}).name('Map');\r\n\t\r\n\t\r\n}\r\n\r\nfunction displayWindowSize(){\r\n\t// Get width and height of the window excluding scrollbars\r\n\tvar w = document.documentElement.clientWidth;\r\n\tvar h = document.documentElement.clientHeight;\r\n\t\r\n\t// Display result inside a div element\r\n\t// console.log(\"Width: \" + w + \", \" + \"Height: \" + h);\r\n\trenderer.setSize(w, h);\r\n\t// camera.fov = Math.atan(window.innerHeight / 2 / camera.position.z) * 2 * THREE.Math.RAD2DEG;\r\n\tcamera.aspect = w / h;\r\n\tcamera.updateProjectionMatrix();\r\n}\r\n\r\n// Attaching the event listener function to window's resize event\r\nwindow.addEventListener(\"resize\", displayWindowSize);\r\n// document.addEventListener( 'keydown', onKeyDown, false );\r\n// document.addEventListener( 'keyup', onKeyUp, false );\r\n\r\nfunction animate() \r\n{\r\n\t\r\n\r\n  requestAnimationFrame(animate);\r\n  render();\r\n  renderer.render(scene, camera);\r\n  controls.update();\r\n  stats.update();\r\n  var dt = clock.getDelta();\r\n  \r\n  //controls.update();\r\n}\r\n\r\n\r\nfunction render() \r\n{\r\n\tconst delta = clock.getDelta();\r\n\t//Para la animacion\r\n\tif ( mixer ) mixer.update( delta );\r\n\tif ( mixer2 ) mixer2.update( delta );\r\n\tif ( mixerCap ) mixerCap.update( delta );\r\n\t\r\n\t\r\n}\r\n\r\ninit();\r\nmain();\r\nanimate();\r\n\r\n* *********************FIN GLTF-Emissive Loader**************************/\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });